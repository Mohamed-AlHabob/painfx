# Generated by Django 5.1.4 on 2024-12-25 22:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('method_name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('license_number', models.CharField(blank=True, max_length=255)),
                ('license_expiry_date', models.DateField(blank=True, null=True)),
                ('license_image', models.ImageField(blank=True, null=True, upload_to='license_images/')),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='clinic_icons/')),
                ('privacy', models.BooleanField(default=False)),
                ('reservation_open', models.BooleanField(db_index=True, default=True)),
                ('active', models.BooleanField(db_index=True, default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_clinics', to=settings.AUTH_USER_MODEL)),
                ('specialization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.specialization')),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('geolocation', models.JSONField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
                ('reservation_open', models.BooleanField(default=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='booking_app.clinic')),
            ],
        ),
        migrations.CreateModel(
            name='BannedPatient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('reason', models.TextField()),
                ('banned_until', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_from', to='authentication.patient')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_patients', to='booking_app.clinic')),
            ],
            options={
                'verbose_name': 'Banned Patient',
                'verbose_name_plural': 'Banned Patients',
            },
        ),
        migrations.CreateModel(
            name='AdvertisingCampaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('campaign_name', models.CharField(max_length=255)),
                ('iamge', models.ImageField(blank=True, null=True, upload_to='campaign_images/')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('budget', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed')], max_length=10)),
                ('goto', models.URLField(blank=True, null=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.clinic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicDoctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.doctor')),
            ],
        ),
        migrations.AddField(
            model_name='clinic',
            name='doctors',
            field=models.ManyToManyField(related_name='clinics', through='booking_app.ClinicDoctor', to='authentication.doctor'),
        ),
        migrations.CreateModel(
            name='ClinicSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('allow_online_bookings', models.BooleanField(default=True)),
                ('notification_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('default_appointment_duration', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)])),
                ('cancellation_policy', models.TextField(blank=True, null=True)),
                ('working_hours', models.JSONField(default=dict)),
                ('holiday_dates', models.JSONField(default=list)),
                ('clinic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='booking_app.clinic')),
            ],
            options={
                'verbose_name': 'Clinic Settings',
                'verbose_name_plural': 'Clinic Settings',
            },
        ),
        migrations.CreateModel(
            name='EventSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('event_name', models.CharField(max_length=255)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('description', models.TextField(blank=True, null=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.clinic')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.doctor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('title', models.CharField(max_length=255)),
                ('video_file', models.FileField(blank=True, null=True, upload_to='videos/')),
                ('video_url', models.URLField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='authentication.doctor')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.post')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('replied', models.BooleanField(default=False)),
                ('comment_text', models.TextField()),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_comments', to='booking_app.comment')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='booking_app.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=10)),
                ('reason_for_cancellation', models.TextField(blank=True)),
                ('reservation_date', models.DateField(db_index=True)),
                ('reservation_time', models.TimeField()),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='booking_app.clinic')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='authentication.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='authentication.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.paymentmethod')),
                ('related_object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='booking_app.reservation')),
            ],
        ),
        migrations.CreateModel(
            name='ReservationDoctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.doctor')),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='booking_app.reservation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='booking_app.clinic')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='authentication.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled')], default='active', max_length=10)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_app.category')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subscriptions', to='booking_app.payment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'indexes': [models.Index(fields=['name'], name='booking_app_name_cb2cae_idx')],
            },
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='posts', to='booking_app.tag'),
        ),
        migrations.CreateModel(
            name='UsersAudit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('changed_data', models.JSONField()),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BranchDoctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_doctors', to='booking_app.branch')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches_assigned', to='authentication.doctor')),
            ],
            options={
                'indexes': [models.Index(fields=['branch', 'doctor'], name='booking_app_branch__2dddd3_idx')],
                'unique_together': {('branch', 'doctor')},
            },
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['clinic'], name='booking_app_clinic__0d0a17_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['reservation_open', 'active'], name='booking_app_reserva_3b019e_idx'),
        ),
        migrations.AddIndex(
            model_name='bannedpatient',
            index=models.Index(fields=['clinic', 'patient', 'banned_until'], name='booking_app_clinic__360b08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bannedpatient',
            unique_together={('clinic', 'patient')},
        ),
        migrations.AddIndex(
            model_name='clinicdoctor',
            index=models.Index(fields=['clinic', 'doctor'], name='booking_app_clinic__6789d2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clinicdoctor',
            unique_together={('clinic', 'doctor')},
        ),
        migrations.AddIndex(
            model_name='clinic',
            index=models.Index(fields=['owner'], name='booking_app_owner_i_ba0ada_idx'),
        ),
        migrations.AddIndex(
            model_name='clinic',
            index=models.Index(fields=['reservation_open', 'active'], name='booking_app_reserva_f730f8_idx'),
        ),
        migrations.AddIndex(
            model_name='clinic',
            index=models.Index(fields=['name', 'address'], name='booking_app_name_2ea5ed_idx'),
        ),
        migrations.AddConstraint(
            model_name='clinic',
            constraint=models.CheckConstraint(condition=models.Q(('latitude__gte', -90), ('latitude__lte', 90)), name='valid_latitude'),
        ),
        migrations.AddConstraint(
            model_name='clinic',
            constraint=models.CheckConstraint(condition=models.Q(('longitude__gte', -180), ('longitude__lte', 180)), name='valid_longitude'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('post', 'user')},
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['patient'], name='booking_app_patient_8351eb_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['clinic'], name='booking_app_clinic__2b1f35_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['doctor'], name='booking_app_doctor__14ab0a_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['reservation_date', 'reservation_time'], name='booking_app_reserva_63e1ce_idx'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('status__in', ['pending', 'approved', 'rejected', 'cancelled'])), name='valid_reservation_status'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user'], name='idx_payments_user_id'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['clinic', 'rating'], name='booking_app_clinic__f68b45_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('clinic', 'patient')},
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['user'], name='booking_app_user_id_69d424_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['doctor'], name='idx_posts_doctor_id'),
        ),
    ]
